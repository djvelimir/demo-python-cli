@startuml Sequence
participant Program as program
participant ArgumentProcessor as argumentProcessor
participant ArgumentValidator as argumentValidator
participant PasswordGenerator as passwordGenerator
participant RandomCharacterGenerator as randomCharacterGenerator
participant StringShuffler as stringShuffler
participant Terminal as terminal

activate program

program -> argumentProcessor: process(args)
activate argumentProcessor

argumentProcessor -> argumentValidator: validate(args)
activate argumentValidator
argumentProcessor <-- argumentValidator: return are arguments valid
deactivate argumentValidator

alt Arguments are valid
    argumentProcessor -> passwordGenerator: generate()
    activate passwordGenerator

    passwordGenerator -> randomCharacterGenerator: generate_uppercase_character()
    activate randomCharacterGenerator

    randomCharacterGenerator -> passwordGenerator: return uppercase character
    deactivate randomCharacterGenerator
    passwordGenerator -> passwordGenerator: append character

    passwordGenerator -> randomCharacterGenerator: generate_lowercase_character()
    activate randomCharacterGenerator

    randomCharacterGenerator -> passwordGenerator: return lowercase character
    deactivate randomCharacterGenerator
    passwordGenerator -> passwordGenerator: append character

    passwordGenerator -> randomCharacterGenerator: generate_digit_character()
    activate randomCharacterGenerator

    randomCharacterGenerator -> passwordGenerator: return digit character
    deactivate randomCharacterGenerator
    passwordGenerator -> passwordGenerator: append character

    passwordGenerator -> randomCharacterGenerator: generate_special_character()
    activate randomCharacterGenerator

    randomCharacterGenerator -> passwordGenerator: return special character
    deactivate randomCharacterGenerator
    passwordGenerator -> passwordGenerator: append character

    loop __password_length - 4 times
        passwordGenerator -> randomCharacterGenerator: generate_allowed_character()
        activate randomCharacterGenerator

        randomCharacterGenerator -> passwordGenerator: return character
        deactivate randomCharacterGenerator
        passwordGenerator -> passwordGenerator: append character
    end

    passwordGenerator -> stringShuffler: shuffle(characters)
    activate stringShuffler

    stringShuffler -> passwordGenerator: return shuffled characters
    deactivate stringShuffler

    argumentProcessor <-- passwordGenerator: return password
    deactivate passwordGenerator

    argumentProcessor -> terminal: show(password)
    activate terminal
    argumentProcessor <-- terminal
    deactivate terminal

else Arguments are not valid
    argumentProcessor -> terminal: show(usage)
    activate terminal
    argumentProcessor <-- terminal
    deactivate terminal
end

program <-- argumentProcessor
deactivate argumentProcessor
@enduml